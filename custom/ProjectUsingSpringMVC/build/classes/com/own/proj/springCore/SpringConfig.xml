<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
 <!--default-init-method="init" default-destroy-method="destroy" when two many beans have these methods with the same name we can declare here inside beans as well instead of declaring in each bean individually -->
	<bean id="restaurantBean" class="com.own.proj.springCore.Restaurant" scope="singleton" lazy-init="true" init-method="init" destroy-method="destroy"><!-- it restricts to instantiate singleton beans at the application start up time -->
	<property name="welcomeNote" value="Welcome to the Restaurant"/><!-- inject value into bean property -->
	<!-- Following are the two ways of dependecy injection -->
	<!-- <constructor-arg ref="teaBean" /> --> <!-- inject Tea object in Restaurant constructor -->
	<property name="hotDrink" ref="teaBean" /><!-- to find name "hotDrink" inside Restaurant class and then inject Tea object using setter method -->
	<property name="restaurantWaiterList">
	<list>
	<value>ABC</value>
	<value>DEF</value>
	<value>GHI</value>
	<value>JKL</value>
	</list>
	</property>
	<property name="welcomeNote1" value="Welcome to the second Restaurant"/>
	<property name="myMessage" value="${myMessage}"/><!-- spring will replace the string value of "myMessage" from spring.properties file with the help of PropertyPlaceholderConfigurer before any bean initialization --> 
	</bean>
	
	<bean id="teaBean" class="com.own.proj.springCore.Tea">
	</bean>
	
	<bean class="com.own.proj.springCore.DemoBeanPostProcessor"><!-- when bean name is not given, only class is provided i.e we are not referring this bean into other beans -->
	</bean>
	
	<bean class="com.own.proj.springCore.DemoBeanPostProcessor2"><!-- we can use n number of BeanPostProcessor class and instruct spring in which order all the classes will get executed -->
	</bean>
	
	<bean class="com.own.proj.springCore.DemoBeanFactoryPostProcessor"><!-- we can use n number of BeanFactoryPostProcessor class and instruct spring in which order all the classes will get executed just like BeanFactoryProcessor-->
	</bean>
	
	<!-- <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" /> --><!-- This is used to enable @PostConstruct and @PreDestroy as these annotations are not recognized by spring -->
 
 	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
 	<property name="location">
 	<value>file:src/com/own/proj/springCore/spring.properties</value>
 	</property>
 	</bean>
 	
</beans>